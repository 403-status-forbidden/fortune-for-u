plugins {
	id 'java'
	id 'org.springframework.boot' version '3.1.5'
	id 'io.spring.dependency-management' version '1.1.3'
	id 'jacoco'
}

group = 'com.a403'
version = '0.0.1-SNAPSHOT'

java {
	sourceCompatibility = '17'
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

jacoco {
	toolVersion = "0.8.8"
	reportsDirectory = layout.buildDirectory.dir('jacocoReport')
}

dependencies {

	implementation 'org.springframework.boot:spring-boot-starter-web'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'

	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'

	// database
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	runtimeOnly 'com.h2database:h2'
	runtimeOnly 'org.mariadb.jdbc:mariadb-java-client'

	// openvidu
	implementation 'io.openvidu:openvidu-java-client:2.29.0'

	// security
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
	testImplementation 'org.springframework.security:spring-security-test'

	// jwt
	implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
	implementation 'io.jsonwebtoken:jjwt-impl:0.11.5'
	implementation 'io.jsonwebtoken:jjwt-jackson:0.11.5'

	//querydsl 추가
	implementation 'com.querydsl:querydsl-core:5.0.0'
	implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
	annotationProcessor "com.querydsl:querydsl-apt:5.0.0:jakarta"
	annotationProcessor 'jakarta.annotation:jakarta.annotation-api'
	annotationProcessor 'jakarta.persistence:jakarta.persistence-api'

	// rabbit mq
	implementation 'org.springframework.boot:spring-boot-starter-websocket'
	implementation 'org.springframework.boot:spring-boot-starter-amqp'

	// swagger
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.2.0'
}

tasks.named('test') {
	useJUnitPlatform()
}

//jacoco setting
jacocoTestReport {
	reports {
		html.required  = true
		xml.required  = false
		csv.required  = false
	}
	excludedClassFilesForReport(classDirectories)
	dependsOn test
	finalizedBy 'jacocoTestCoverageVerification'
}

jacocoTestCoverageVerification {
	excludedClassFilesForReport(classDirectories)
	violationRules {
		rule {
			element = 'CLASS'
			enabled = true

			limit {
				counter = 'LINE'
				value = 'COVEREDRATIO'
				//minimum = 0.90
			}

			limit {
				counter = 'BRANCH'
				value = 'COVEREDRATIO'
				//minimum = 0.90
			}
		}
	}
}

private excludedClassFilesForReport(classDirectories) {
	classDirectories.setFrom(
			files(classDirectories.files.collect {
				fileTree(dir: it, exclude: [
						"**/*domain*/**",
						"**/*Dto*",
						"**/*Request*",
						"**/*Response*",
						"**/*Interceptor*",
						"**/*Application*",
						"**/*Mapper*",
						"**/*Exception*"
				])
			})
	)
}

//Querydsl setting
clean {
	delete file('src/main/generated')
}